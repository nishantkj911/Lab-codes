#include <stdio.h>
#include <stdlib.h>
#include <CL/cl.h>

#define MAX_SOURCE_SIZE (0x1000000)

int main(int argc, char const *argv[])
{
    int n;
    printf("Enter the no. of numbers to be entered\n");
    scanf("%i", &n);

    int *A = calloc(n, sizeof(int));
    long *B = calloc(n, sizeof(long));

    for (int i = 0; i < n; i++)
    {
        A[i] = 3 * i * i + 2 * i + 10;
    }

    FILE *fp = fopen("kernel.cl", "r");
    if (fp == NULL)
    {
        printf("Couldn't open kernel\n");
        exit(EXIT_FAILURE);
    }

    const char *sourceStr;
    size_t pgmSize = fread(sourceStr, 1, MAX_SOURCE_SIZE, fp);
    fclose(fp);

    cl_platform_id pf;
    cl_device_id devid;
    cl_int num_plat, num_dev;
    cl_uint ret;

    ret = clGetPlatformIDs(1, &pf, &num_dev);
    ret = clGetDeviceIDs(pf, CL_DEVICE_TYPE_GPU, 0, &devid, &num_dev);

    cl_context context = clCreateContext(NULL, 1, &devid, NULL, NULL, &ret);
    cl_command_queue cq = clCreateCommandQueue(context, devid, CL_QUEUE_PROFILING_ENABLE, &ret);

    cl_mem aMemObj = clCreateBuffer(context, CL_MEM_READ_ONLY, n * sizeof(int), NULL, &ret);
    cl_mem bMemObj = clCreateBuffer(context, CL_MEM_WRITE_ONLY, n * sizeof(long), NULL, &ret);

    ret = clEnqueueWriteBuffer(context, aMemObj, CL_TRUE, 0, n * sizeof(int), A, 0, NULL, NULL);

    cl_program pgm = clCreateProgramWithSource(context, 1, &sourceStr, pgmSize, &ret);
    clBuildProgram(context, pgm, &devid, NULL, NULL, NULL);

    cl_kernel kernel = clCreateKernel(pgm, "dToO", &ret);

    clSetKernelArg(kernel, 0, sizeof(cl_mem), aMemObj);
    clSetKernelArg(kernel, 1, sizeof(cl_mem), bMemObj);

    size_t global_work_size = n;
    size_t local_work_size = 1;

    ret = clEnqueueNDRangeKernel(cq, kernel, 1, NULL, &global_work_size, &local_work_size, 0, NULL, NULL);

    clEnqueueReadBuffer(context, bMemObj, CL_TRUE, 0, sizeof(cl_mem), B, 0, NULL, NULL);

    for (int i = 0; i < n; i++)
    {
        printf("%i\n", B[i]);
    }

    ret = clFlush(cq);
    ret = clReleaseKernel(kernel);
    ret = clReleaseProgram(pgm);
    ret = clReleaseMemObject(aMemObj);
    ret = clReleaseMemObject(bMemObj);
    ret = clReleaseCommandQueue(cq);
    ret = clReleaseContext(context);

    free(A);
    free(B);
    return 0;
}
