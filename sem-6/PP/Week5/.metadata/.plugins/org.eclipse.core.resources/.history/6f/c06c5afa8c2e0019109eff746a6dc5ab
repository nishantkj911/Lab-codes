#include <stdio.h>
#include <stdlib.h>
#include <CL/cl.h>

#define MAX_SOURCE_SIZE (0x1000000)

int main(int argc, char const *argv[])
{
    int n;
    printf("Enter the no. of elements\n");
    scanf("%i", &n);

    int *A = calloc(n, sizeof(int));
    for (int i = 0; i < n; i++)
    {
        scanf("%i", &A[i]);
    }

    FILE *fp = fopen("kernel.cl", "r");
    if(fp == NULL)
    {
        printf("Couldn't open kernel\n");
        exit(EXIT_FAILURE);
    }

    char *sourcePgm = calloc(MAX_SOURCE_SIZE, sizeof(char));
    size_t sourcePgmSize = fread(sourcePgm, 1, MAX_SOURCE_SIZE, fp);

    cl_platform_id plt;
    cl_device_id devid;

    cl_int numPlt, numDevID;
    cl_uint ret;

    ret = clGetPlatformIDs(1, &plt, &numPlt);
    ret = clGetDeviceIDs(plt, CL_DEVICE_TYPE_GPU, 1, &devid, &numDevID);

    cl_context context = clCreateContext(NULL, 1, &devid, NULL, NULL, &ret);
    cl_command_queue cq = clCreateCommandQueue(context, devid, CL_QUEUE_PROFILING_ENABLE, &ret);

    cl_mem aMemObj = clCreateBuffer(context, CL_MEM_READ_WRITE, n * sizeof(int), NULL, ret);

    clEnqueueWriteBuffer(cq, aMemObj, CL_TRUE, 0, n * sizeof(int), A, 0, NULL, NULL);

    cl_program pgm = clCreateProgramWithSource(context, 1, &sourcePgm, &sourcePgmSize, &ret);
    clBuildProgram(pgm, 1, &devid, NULL, NULL, NULL);

    cl_kernel kernel = clCreateKernel(pgm, "swapAdjacent", &ret);

    clSetKernelArg(kernel, 0, sizeof(cl_mem), &aMemObj);

    size_t globalWorkSize = n / 2, localWorkSize = 1;
    cl_event event;
    clEnqueueNDRangeKernel(cq, kernel, 1, NULL, &globalWorkSize, &localWorkSize, 0, NULL, &event);

    clFinish(cq);

    clEnqueueReadBuffer(cq, aMemObj, CL_TRUE, 0, n * sizeof(int), A, 0, NULL, NULL);

    for (int i = 0; i < n; i++)
    {
        printf("%i\n", A[i]);
    }

    clFlush(cq);
    clReleaseKernel(kernel);
    clReleaseProgram(pgm);
    clReleaseMemObject(aMemObj);
    clReleaseCommandQueue(cq);
    clReleaseContext(context);

    free(A);
    return 0;
}
