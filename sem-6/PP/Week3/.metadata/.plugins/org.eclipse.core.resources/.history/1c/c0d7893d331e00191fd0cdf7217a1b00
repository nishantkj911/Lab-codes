#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

int main(int argc, char *argv[])
{
    int rank, size, len;
    char *str1 = calloc(BUFSIZ, sizeof(char));
    char *str2 = calloc(BUFSIZ, sizeof(char));
    char *finalStr = calloc(2 * BUFSIZ, sizeof(char));

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0)
    {
        printf("Enter a string (length be divisible by no. of processes)\n");
        scanf("%[^\n]%*c", str1);
        len = strlen(str1);

        printf("Enter another string of the same length\n");
        scanf("%[^\n]%*c", str2);

        if (len != strlen(str2) && len % size != 0)
        {
            perror("Please enter strings of same length and length be divisible by no. of processes\n");
        }
    }

    MPI_Bcast(&len, 1, MPI_INT, 0, MPI_COMM_WORLD);

    char *buf = calloc(2 * len / size, sizeof(char));
    MPI_Scatter(str1, len / size, MPI_CHAR, buf, len / size, MPI_CHAR, 0, MPI_COMM_WORLD);
    MPI_Scatter(str1, len / size, MPI_CHAR, &buf[len/size], len / size, MPI_CHAR, 0, MPI_COMM_WORLD);

    printf("Process %i got %s as concatenated string\n", rank , buf);

    MPI_Gather(buf, 2 * len / size, MPI_CHAR, finalStr, 2 * len / size, MPI_CHAR, 0, MPI_COMM_WORLD);
    if(rank == 0)
    {
        printf("The final string recieved is %s\n", finalStr);
    }
    MPI_Finalize();
    return 0;
}