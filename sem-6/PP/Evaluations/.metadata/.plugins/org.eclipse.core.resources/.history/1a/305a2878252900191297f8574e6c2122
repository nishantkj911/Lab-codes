#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include <limits.h>

int main(int argc, char const *argv[])
{
    int rank, size, row = 5, col = 5, A[row][col], B[row][col];

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0)
    {
        printf("Input a 5 X 5 matrix\n");
        for (int i = 0; i < row; i++)
        {
            for (int j = 0; j < col; j++)
            {
                scanf("%i", &A[i][j]);
            }
        }
    }

    int colRank[col];
    for (int i = 0; i < col; i++)
    {
        MPI_Scatter(A[i], 1, MPI_INT, &colRank[i], 1, MPI_INT, 0, MPI_COMM_WORLD);
    }

    printf("Rank %i got\n", rank);
    for (int i = 0; i < col; i++)
    {
        printf("%i ", colRank[i]);
    }
    printf("\n");

    int max = INT_MIN, min = INT_MAX;
    for (int i = 0; i < col; i++)
    {
        if (colRank[i] < min)
        {
            min = colRank[i];
        }
        if (colRank[i] > max)
        {
            max = colRank[i];
        }
    }

    int matBArr[col];
    for (int i = 0; i < col; i++)
    {
        if (i == rank)
        {
            matBArr[i] = 0;
        }
        else if (i < rank)
        {
            matBArr[i] = max;
        }
        else
        {
            matBArr[i] = min;
        }
    }

    MPI_Gather(matBArr, 5, MPI_INT, B, 5, MPI_INT, 0, MPI_COMM_WORLD);

    if(rank == 0)
    {
        for (int i = 0; i < row; i++)
        {
            for (int j = 0; j < col; j++)
            {
                printf("%i ", B[i][j]);
            }
            printf("\n");
        }
        
    }

    MPI_Finalize();
    return 0;
}
